
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  username        String    @unique
  email           String    @unique
  password        String    
  phone           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  role            String?
  isAdmin         Boolean   @default(false)
  profile         Profile?
  team            TeamMember[]
  project         ProjectMember[]
  assignedTasks   Tasks[]    @relation("AssignedTasks")
  authoredTasks   Tasks[]    @relation("AuthoredTasks")
}

model Profile {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  fullName        String
  bio             String?
  dateOfBirth     DateTime?
  avatar          String?     @default("../assets/images/avatars/cat.jpg")
  user            User        @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Team {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String      
  bio             String?
  address         String?
  phonenumber     String?
  email           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  avatar          String?     @default("../assets/images/avatars/cat.jpg")
  member          TeamMember[]       
}

model TeamMember {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String      @db.ObjectId
  team            Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId          String      @db.ObjectId
  joinedAt        DateTime    @default(now())
  role            String?
}

model Tasks {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  body            String
  status          String
  statusColor     String
  statusName      String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isExpiration    Boolean     @default(false)
  expirationDate  DateTime
  images          String[]
  tags            String[]
  projectId       String?     @db.ObjectId
  project         Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team            String?
  type            String?
  history         TaskHistory[]
  priority        String?
  priorityName    String?
  progress        Float?
  employeeId      String?     @db.ObjectId
  employee        User?       @relation("AssignedTasks", fields: [employeeId], references: [id])
  authorId        String?     @db.ObjectId
  author          User?       @relation("AuthoredTasks", fields: [authorId], references: [id])
}

model Project {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  createdAt       DateTime    @default(now())
  member          ProjectMember[]
  tasks           Tasks[]     
  avatar          String?     @default("../assets/images/avatars/cat.jpg")
  deadline        DateTime    @default(now())
}

model ProjectMember {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String      @db.ObjectId
  project         Project     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId          String      @db.ObjectId
  joinedAt        DateTime    @default(now())
  role            String?
}

model TaskHistory {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  taskId          String      @db.ObjectId
  action          String
  changes         Json
  createdAt       DateTime    @default(now())
  task            Tasks?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

